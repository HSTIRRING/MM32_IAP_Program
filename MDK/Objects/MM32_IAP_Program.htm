<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MM32_IAP_Program.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MM32_IAP_Program.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Dec 05 08:17:20 2018
<BR><P>
<H3>Maximum Stack Usage =        116 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; hw_board_init &rArr; device_usart_init &rArr; UART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[58]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[38]">CPT1_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[39]">CPT2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_mm32l3xx.o(i.SystemInit) referenced from startup_mm32l3xx.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[32]">UART1_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[33]">UART2_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[34]">UART3_IRQHandler</a> from device_usart.o(i.UART3_IRQHandler) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_mm32l3xx.o(.text) referenced from startup_mm32l3xx.o(RESET)
 <LI><a href="#[45]">__main</a> from __main.o(!!!main) referenced from startup_mm32l3xx.o(.text)
 <LI><a href="#[44]">bootarg_set</a> from program.o(i.bootarg_set) referenced from program.o(.constdata)
 <LI><a href="#[3f]">erase_callback</a> from program.o(i.erase_callback) referenced from program.o(.constdata)
 <LI><a href="#[40]">program_callback</a> from program.o(i.program_callback) referenced from program.o(.constdata)
 <LI><a href="#[3c]">program_timeout</a> from program_protocol.o(i.program_timeout) referenced from program_protocol.o(i.program_probe_stream)
 <LI><a href="#[3c]">program_timeout</a> from program_protocol.o(i.program_timeout) referenced from program_protocol.o(i.program_protocol)
 <LI><a href="#[3c]">program_timeout</a> from program_protocol.o(i.program_timeout) referenced from program_protocol.o(i.program_protocol_init)
 <LI><a href="#[41]">read_callback</a> from program.o(i.read_callback) referenced from program.o(.constdata)
 <LI><a href="#[3e]">read_infomation_callback</a> from program.o(i.read_infomation_callback) referenced from program.o(.constdata)
 <LI><a href="#[43]">startup_application_callback</a> from program.o(i.startup_application_callback) referenced from program.o(.constdata)
 <LI><a href="#[3d]">usart_recv_timeout</a> from device_usart.o(i.usart_recv_timeout) referenced from device_usart.o(i.usart_poll)
 <LI><a href="#[42]">verif_callback</a> from program.o(i.verif_callback) referenced from program.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[46]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[48]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[49]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[af]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; hw_board_init &rArr; device_usart_init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[51]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[53]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32l3xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mm32l3xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7c]"></a>hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_resource_reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe_stream
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_read
</UL>

<P><STRONG><a name="[55]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[c8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_callback_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe_stream
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_init
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[50]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>CRC_CalcBlockCRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_crc.o(i.CRC_CalcBlockCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_CalcBlockCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_crc32
</UL>

<P><STRONG><a name="[5a]"></a>CRC_CalcCRC</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, hal_crc.o(i.CRC_CalcCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CRC_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_crc32
</UL>

<P><STRONG><a name="[5b]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_crc.o(i.CRC_GetCRC))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcCRC
</UL>

<P><STRONG><a name="[88]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_crc.o(i.CRC_ResetDR))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_crc32
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hal_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_ProgramWord</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
</UL>

<P><STRONG><a name="[8a]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[70]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, hal_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[61]"></a>NVIC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[74]"></a>NVIC_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hal_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[62]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmp_application
</UL>

<P><STRONG><a name="[78]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_resource_reset
</UL>

<P><STRONG><a name="[71]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[6f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[6d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, hal_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_mm32l3xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>UART3_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, device_usart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32l3xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[66]"></a>UART_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(i.UART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[6c]"></a>UART_Init</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, hal_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
</UL>

<P><STRONG><a name="[69]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
</UL>

<P><STRONG><a name="[90]"></a>checksum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, program_protocol.o(i.checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_verif
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_read_infomation
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_erase
</UL>

<P><STRONG><a name="[a2]"></a>copy_to_runmem</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.copy_to_runmem))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_application_callback
</UL>

<P><STRONG><a name="[6e]"></a>device_usart_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, device_usart.o(i.device_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = device_usart_init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[77]"></a>hardware_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hardware_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_init
</UL>

<P><STRONG><a name="[79]"></a>hw_board_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, board.o(i.hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hw_board_init &rArr; device_usart_init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_usart_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>jmp_application</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hardware.o(i.jmp_application))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmp_application &rArr; hw_resource_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_resource_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_application_callback
</UL>

<P><STRONG><a name="[7f]"></a>led_control</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device_led.o(i.led_control))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[7a]"></a>led_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device_led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_led_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = main &rArr; hw_board_init &rArr; device_usart_init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_poll
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_disable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[75]"></a>memory_available</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, program.o(i.memory_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memory_available
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verif_callback
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_callback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_callback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_callback
</UL>

<P><STRONG><a name="[87]"></a>memory_crc32</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, hardware.o(i.memory_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memory_crc32 &rArr; CRC_CalcBlockCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcCRC
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verif_callback
</UL>

<P><STRONG><a name="[76]"></a>memory_erase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hardware.o(i.memory_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = memory_erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_callback
</UL>

<P><STRONG><a name="[a1]"></a>memory_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hardware.o(i.memory_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memory_read
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_callback
</UL>

<P><STRONG><a name="[8c]"></a>memory_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hardware.o(i.memory_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memory_write &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_callback
</UL>

<P><STRONG><a name="[a3]"></a>program_application_strtup_address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, program.o(i.program_application_strtup_address))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_application_callback
</UL>

<P><STRONG><a name="[82]"></a>program_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, program.o(i.program_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_init &rArr; program_protocol_callback_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_callback_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>program_protocol_callback_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, program_protocol.o(i.program_protocol_callback_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = program_protocol_callback_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_init
</UL>

<P><STRONG><a name="[86]"></a>program_protocol_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, program_protocol.o(i.program_protocol_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = program_protocol_handler &rArr; program_protocol &rArr; program_verif &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe_stream
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>program_protocol_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, program_protocol.o(i.program_protocol_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = program_protocol_init &rArr; soft_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>soft_timer_check</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, soft_timer.o(i.soft_timer_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[84]"></a>soft_timer_handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, soft_timer.o(i.soft_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soft_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>soft_timer_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, soft_timer.o(i.soft_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = soft_timer_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>soft_timer_start</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, soft_timer.o(i.soft_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soft_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe_stream
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_poll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_init
</UL>

<P><STRONG><a name="[a0]"></a>soft_timer_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, soft_timer.o(i.soft_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soft_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_startup
</UL>

<P><STRONG><a name="[85]"></a>usart_poll</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, device_usart.o(i.usart_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_poll &rArr; soft_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_clear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>usart_read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, device_usart.o(i.usart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[3d]"></a>usart_recv_timeout</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, device_usart.o(i.usart_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_recv_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_usart.o(i.usart_poll)
</UL>
<P><STRONG><a name="[91]"></a>usart_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device_usart.o(i.usart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_verif
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_std_return
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_read_infomation
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_program
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe_stream
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_probe
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_erase
</UL>

<P><STRONG><a name="[9e]"></a>usart_status_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, device_usart.o(i.usart_status_clear))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_poll
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[68]"></a>usart_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device_usart.o(i.usart_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_poll
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[6a]"></a>usart_status_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, device_usart.o(i.usart_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv_timeout
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>program_bootarg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, program_protocol.o(i.program_bootarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_bootarg &rArr; program_std_return &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_std_return
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[8f]"></a>program_erase</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, program_protocol.o(i.program_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_erase &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[93]"></a>program_probe</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, program_protocol.o(i.program_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_probe &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[94]"></a>program_probe_stream</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, program_protocol.o(i.program_probe_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = program_probe_stream &rArr; soft_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[97]"></a>program_program</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, program_protocol.o(i.program_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_program &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[98]"></a>program_protocol</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, program_protocol.o(i.program_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = program_protocol &rArr; program_verif &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_verif
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_std_return
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_startup
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_read_infomation
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_bootarg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol_handler
</UL>

<P><STRONG><a name="[9a]"></a>program_read</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, program_protocol.o(i.program_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_read &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[99]"></a>program_read_infomation</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, program_protocol.o(i.program_read_infomation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_read_infomation &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[9c]"></a>program_startup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, program_protocol.o(i.program_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_startup &rArr; program_std_return &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_std_return
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[8e]"></a>program_std_return</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program_protocol.o(i.program_std_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = program_std_return &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_startup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_bootarg
</UL>

<P><STRONG><a name="[3c]"></a>program_timeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, program_protocol.o(i.program_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = program_timeout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> program_protocol.o(i.program_probe_stream)
<LI> program_protocol.o(i.program_protocol)
<LI> program_protocol.o(i.program_protocol_init)
</UL>
<P><STRONG><a name="[9b]"></a>program_verif</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, program_protocol.o(i.program_verif))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = program_verif &rArr; usart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_protocol
</UL>

<P><STRONG><a name="[7b]"></a>hw_resource_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hardware.o(i.hw_resource_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_resource_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmp_application
</UL>

<P><STRONG><a name="[44]"></a>bootarg_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, program.o(i.bootarg_set))
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>erase_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, program.o(i.erase_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = erase_callback &rArr; memory_erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_available
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>program_callback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, program.o(i.program_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = program_callback &rArr; memory_write &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_available
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>read_callback</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, program.o(i.read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_callback &rArr; memory_available
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_available
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>read_infomation_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, program.o(i.read_infomation_callback))
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>startup_application_callback</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, program.o(i.startup_application_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = startup_application_callback &rArr; jmp_application &rArr; hw_resource_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application_strtup_address
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmp_application
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_runmem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>verif_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, program.o(i.verif_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = verif_callback &rArr; memory_crc32 &rArr; CRC_CalcBlockCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_available
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_crc32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> program.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>hw_led_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device_led.o(i.hw_led_init))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[60]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_flash.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[63]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_mm32l3xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo96_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[64]"></a>SetSysClockTo96_HSI</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, system_mm32l3xx.o(i.SetSysClockTo96_HSI))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
